/*
 * generated by Xtext 2.18.0
 */
grammar InternalHello;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.galimatias.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.galimatias.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.galimatias.services.HelloGrammarAccess;

}

@parser::members {

 	private HelloGrammarAccess grammarAccess;

    public InternalHelloParser(TokenStream input, HelloGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected HelloGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getWebserverWebserverParserRuleCall_0_0());
				}
				lv_webserver_0_0=ruleWebserver
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"webserver",
						lv_webserver_0_0,
						"org.galimatias.Hello.Webserver");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getWifisWifiParserRuleCall_1_0());
				}
				lv_wifis_1_0=ruleWifi
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"wifis",
						lv_wifis_1_0,
						"org.galimatias.Hello.Wifi");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleWebserver
entryRuleWebserver returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWebserverRule()); }
	iv_ruleWebserver=ruleWebserver
	{ $current=$iv_ruleWebserver.current; }
	EOF;

// Rule Webserver
ruleWebserver returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Webserver'
		{
			newLeafNode(otherlv_0, grammarAccess.getWebserverAccess().getWebserverKeyword_0());
		}
		(
			(
				lv_url_1_0=RULE_STRING
				{
					newLeafNode(lv_url_1_0, grammarAccess.getWebserverAccess().getUrlSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWebserverRule());
					}
					setWithLastConsumed(
						$current,
						"url",
						lv_url_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_port_2_0=RULE_INT
				{
					newLeafNode(lv_port_2_0, grammarAccess.getWebserverAccess().getPortINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWebserverRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleWifi
entryRuleWifi returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWifiRule()); }
	iv_ruleWifi=ruleWifi
	{ $current=$iv_ruleWifi.current; }
	EOF;

// Rule Wifi
ruleWifi returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Wifi'
		{
			newLeafNode(otherlv_0, grammarAccess.getWifiAccess().getWifiKeyword_0());
		}
		(
			(
				lv_ssid_1_0=RULE_STRING
				{
					newLeafNode(lv_ssid_1_0, grammarAccess.getWifiAccess().getSsidSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWifiRule());
					}
					setWithLastConsumed(
						$current,
						"ssid",
						lv_ssid_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_password_2_0=RULE_STRING
				{
					newLeafNode(lv_password_2_0, grammarAccess.getWifiAccess().getPasswordSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWifiRule());
					}
					setWithLastConsumed(
						$current,
						"password",
						lv_password_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
