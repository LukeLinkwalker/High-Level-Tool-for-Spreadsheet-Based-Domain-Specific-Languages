/*
 * generated by Xtext 2.18.0
 */
package org.galimatias.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.galimatias.hello.HelloPackage;
import org.galimatias.hello.Program;
import org.galimatias.hello.Wifi;
import org.galimatias.services.HelloGrammarAccess;

@SuppressWarnings("all")
public class HelloSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HelloGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HelloPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HelloPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case HelloPackage.WIFI:
				sequence_Wifi(context, (Wifi) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     webserver=Webserver
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloPackage.Literals.PROGRAM__WEBSERVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloPackage.Literals.PROGRAM__WEBSERVER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getWebserverWebserverParserRuleCall_0(), semanticObject.getWebserver());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Wifi returns Wifi
	 *
	 * Constraint:
	 *     (ssid=STRING password=STRING)
	 */
	protected void sequence_Wifi(ISerializationContext context, Wifi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloPackage.Literals.WIFI__SSID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloPackage.Literals.WIFI__SSID));
			if (transientValues.isValueTransient(semanticObject, HelloPackage.Literals.WIFI__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloPackage.Literals.WIFI__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWifiAccess().getSsidSTRINGTerminalRuleCall_1_0(), semanticObject.getSsid());
		feeder.accept(grammarAccess.getWifiAccess().getPasswordSTRINGTerminalRuleCall_2_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
}
